(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{179:function(t,a,s){"use strict";s.r(a);var n=s(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"_94-binary-tree-maximum-path-sum"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_94-binary-tree-maximum-path-sum","aria-hidden":"true"}},[t._v("#")]),t._v(" 94. Binary Tree Maximum Path Sum")]),t._v(" "),s("p",[t._v("#Lintcode/分治法")]),t._v(" "),s("hr"),t._v(" "),s("h1",{attrs:{id:"idea"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idea","aria-hidden":"true"}},[t._v("#")]),t._v(" Idea")]),t._v(" "),s("p",[t._v("计算树的最长path有2种情况：")]),t._v(" "),s("ol",[s("li",[t._v("通过根的path.")])]),t._v(" "),s("p",[t._v("(1)如果左子树从左树根到任何一个Node的path大于零，可以链到root上")]),t._v(" "),s("p",[t._v("(2)如果右子树从右树根到任何一个Node的path大于零，可以链到root上")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("不通过根的path. 这个可以取左子树及右子树的path的最大值。")])]),t._v(" "),s("p",[t._v("所以创建一个inner class:")]),t._v(" "),s("p",[t._v("记录2个值：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("本树的最大path。")])]),t._v(" "),s("li",[s("p",[t._v("本树从根节点出发到任何一个节点的最大path.")])])]),t._v(" "),s("p",[t._v("注意，当root == null,以上2个值都要置为Integer_MIN_VALUE; 因为没有节点可取的时候，是不存在solution的。以免干扰递归的计算.")]),t._v(" "),s("hr"),t._v(" "),s("h1",{attrs:{id:"codes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#codes","aria-hidden":"true"}},[t._v("#")]),t._v(" Codes")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" singlePath"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxPath"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("ResultType")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" singlePath"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxPath"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singlePath "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" singlePath"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxPath "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" maxPath"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("maxPathSum")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TreeNode root"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("helper")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxPath"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" ResultType "),s("span",{attrs:{class:"token function"}},[t._v("helper")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TreeNode root"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Integer"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MIN_VALUE"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    ResultType left "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("helper")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ResultType right "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("helper")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" singlePath "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("max")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singlePath"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singlePath"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" root"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    singlePath "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("max")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singlePath"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxPath "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("max")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxPath"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxPath"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    maxPath "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("max")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxPath"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" left"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singlePath "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" right"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singlePath "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" root"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singlePath"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxPath"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],!1,null,null,null);o.options.__file="94. Binary Tree Maximum Path Sum.md";a.default=o.exports}}]);