(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{166:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"_103-linked-list-cycle-ii"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_103-linked-list-cycle-ii","aria-hidden":"true"}},[t._v("#")]),t._v(" 103. Linked List Cycle II")]),t._v(" "),a("p",[t._v("#Lintcode/链表环")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"idea"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#idea","aria-hidden":"true"}},[t._v("#")]),t._v(" Idea")]),t._v(" "),a("ol",[a("li",[t._v("首先与 [[102. Linked List Cycle]] 一样，不过这次要找环中相遇的节点")]),t._v(" "),a("li",[t._v("然后将其中一个指针 (fast, slow) 放在开始 "),a("code",[t._v("slow = head")])]),t._v(" "),a("li",[t._v("指针 slow 和 fast 指针都各自走一步，不断循环，最终两个指针相遇时候就是环的入口节点")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"codes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codes","aria-hidden":"true"}},[t._v("#")]),t._v(" Codes")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" ListNode "),a("span",{attrs:{class:"token function"}},[t._v("detectCycle")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode head"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ListNode intersection "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("chase")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// No cycle")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intersection "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    ListNode line "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ListNode cycle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" intersection"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" cycle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        line "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" line"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        cycle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" cycle"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" line"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" ListNode "),a("span",{attrs:{class:"token function"}},[t._v("chase")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode head"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ListNode slow "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ListNode fast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fast"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        slow "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        fast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slow "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" fast"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fast"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],!1,null,null,null);e.options.__file="103. Linked List Cycle II.md";s.default=e.exports}}]);