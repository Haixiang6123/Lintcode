(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{184:function(t,s,a){"use strict";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"_578-lowest-common-ancestor-iii"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_578-lowest-common-ancestor-iii","aria-hidden":"true"}},[t._v("#")]),t._v(" 578. Lowest Common Ancestor III")]),t._v(" "),a("p",[t._v("#Lintcode/分治法")]),t._v(" "),a("hr"),t._v(" "),a("h1",{attrs:{id:"idea"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#idea","aria-hidden":"true"}},[t._v("#")]),t._v(" Idea")]),t._v(" "),a("ol",[a("li",[t._v("第一种情况：root 是其中一个A、B节点。")]),t._v(" "),a("li",[t._v("第二种情况：A、B在当前根节点的左右子树中。")]),t._v(" "),a("li",[t._v("第三种情况：right 右子树没有结果，那么说明左子树有结果。")]),t._v(" "),a("li",[t._v("第四种情况：left 左子树没有结果，那么说明右子树有结果。")])]),t._v(" "),a("hr"),t._v(" "),a("h1",{attrs:{id:"codes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codes","aria-hidden":"true"}},[t._v("#")]),t._v(" Codes")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" aExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" TreeNode node"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("ResultType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" aExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" bExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TreeNode node"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aExist "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" aExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bExist "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" bExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" TreeNode "),a("span",{attrs:{class:"token function"}},[t._v("lowestCommonAncestor3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TreeNode root"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TreeNode A"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TreeNode B"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ResultType rt "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("helper")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rt"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aExist "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" rt"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rt"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" ResultType "),a("span",{attrs:{class:"token function"}},[t._v("helper")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TreeNode root"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TreeNode A"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TreeNode B"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    ResultType left "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("helper")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ResultType right "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("helper")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" aExist "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" left"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aExist "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" right"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aExist "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" root "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" A"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" bExist "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" left"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bExist "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" right"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bExist "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" root "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" B"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" A "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" root "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" B"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" right"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" left"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("ResultType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bExist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],!1,null,null,null);o.options.__file="578. Lowest Common Ancestor III.md";s.default=o.exports}}]);