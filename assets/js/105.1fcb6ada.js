(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{165:function(t,s,n){"use strict";n.r(s);var a=n(0),o=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"_380-intersection-of-two-linked-lists"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_380-intersection-of-two-linked-lists","aria-hidden":"true"}},[t._v("#")]),t._v(" 380. Intersection of Two Linked Lists")]),t._v(" "),n("p",[t._v("#Lintcode")]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"idea"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#idea","aria-hidden":"true"}},[t._v("#")]),t._v(" Idea")]),t._v(" "),n("p",[n("img",{attrs:{src:"380.%20Intersection%20of%20Two%20Linked%20Lists/AADA3B0F-6BF3-4BDC-BBFE-D904660971EE.png",alt:""}})]),t._v(" "),n("ol",[n("li",[t._v("首先遍历链表A找到链表C的最后一个节点")]),t._v(" "),n("li",[t._v("然后将C3和B1链接起来")]),t._v(" "),n("li",[t._v("运用 [[103. Linked List Cycle II]] 方法来找到入口节点")])]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"codes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#codes","aria-hidden":"true"}},[t._v("#")]),t._v(" Codes")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" ListNode "),n("span",{attrs:{class:"token function"}},[t._v("getIntersectionNode")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode headA"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ListNode headB"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("headA "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" headB "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" null"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Link the end of c with headb")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("cycle")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("headA"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" headB"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Find the intersection point")]),t._v("\n    ListNode intersection "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("chase")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("headA"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// No cycle")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intersection "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" null"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Find the entrance")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("findEntrance")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("headA"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" intersection"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("cycle")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode headA"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ListNode headB"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ListNode p "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" headA"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        p "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Find the end of linked list c")]),t._v("\n    p"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" headB"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" ListNode "),n("span",{attrs:{class:"token function"}},[t._v("chase")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode headA"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ListNode slow "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" headA"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ListNode fast "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" headA"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast "),n("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fast"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        slow "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        fast "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slow "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" fast"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fast"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" null"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" ListNode "),n("span",{attrs:{class:"token function"}},[t._v("findEntrance")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode line"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ListNode cycle"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line "),n("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" cycle"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        line "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" line"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        cycle "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" cycle"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" line"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],!1,null,null,null);o.options.__file="380. Intersection of Two Linked Lists.md";s.default=o.exports}}]);